import matplotlib.pyplot as plt
import pandas as pd
spark = SparkSession.builder \
    .appName("Netflix Sentiment Analysis") \
    .getOrCreate()
spark.sparkContext.setLogLevel("ERROR")
df = spark.read.csv("/kaggle/input/new-2-netflix-dataset", header=True, inferSchema=True)
df.show(5)
# Sentiment Distribution
df.groupBy("sentiment_label").count().show()
# Most Common Genres
from pyspark.sql.functions import explode, split
df_genre = df.withColumn("genre", explode(split("listed_in", ", ")))
df_genre.groupBy("genre").count().orderBy("count", ascending=False).show(10)
#Average Sentiment Score by Genre
df_genre.groupBy("genre").avg("sentiment").orderBy("avg(sentiment)", ascending=False).show(10)
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df = pd.read_csv("/kaggle/input/netflix-data-set-123/netflix1.csv")
df.head()
df.tail()
df.info()
df.describe()
df.shape
# Data Cleaning
df.isnull().sum()
# Drop duplicates if any
df.drop_duplicates(inplace = True)
# Drop rows with missing criting information
df.dropna(subset=['director','country'],inplace = True)
 # Convert 'date_added' to datetime
df['date_added'] = pd.to_datetime(df['date_added'])
# Show data types to confirm changes
print(df.dtypes)
# Exploratory Data Analysis
# 1. Content type distribution (Movies vs TV shows)
type_counts = df['type'].value_counts()
# Plot the distribution 
plt.figure(figsize=(5,3))
sns.barplot(x = type_counts.index, y = type_counts.values, palette = "Set2")
plt.title("Distribution of Content by Type")
plt.xlabel("Type")
plt.ylabel("Count")
plt.show()
# 2. Most common genres
# Split the 'listed_in' column and count genres
df['genres'] = df['listed_in'].apply(lambda x: x.split(','))
all_genres = sum(df['genres'], [])
genre_counts = pd.Series(all_genres).value_counts().head(10)
# Plot the most common genres
plt.figure(figsize=(5, 3))
sns.barplot(x = genre_counts.values, y = genre_counts.index, palette = 'Set3')
plt.title('Most Common Genres on Netflix')
plt.xlabel('Count')
plt.ylabel('Genre')
plt.show()
# 3. Top 10 countries by content
top_countries = df['country'].value_counts().head(10)
plt.figure(figsize=(8, 4))
top_countries.plot(kind='line', color='purple')
plt.title('Top 10 Countries by Content')
plt.xlabel('Country')
plt.ylabel('Number of Shows')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
# 4. Rating Distribution
top_ratings = df['rating'].value_counts().head(10)
plt.figure(figsize=(8, 5))
top_ratings.plot(kind='bar', color='green')
plt.title('Top 10 Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()
# Box Plot of Movie Durations by Type
# Only keep rows with numeric duration
df['duration_num'] = df['duration'].str.extract('(\d+)').astype(float)
plt.figure(figsize=(8, 5))
sns.boxplot(x='type', y='duration_num', data=df, palette='Set2')
plt.title('Box Plot of Duration by Type')
plt.xlabel('Content Type')
plt.ylabel('Duration (Minutes / Seasons)')
plt.grid(True, axis='y', linestyle='--', alpha=0.5)
plt.tight_layout()
plt.show()
# Select numeric columns
numeric_df = df[['release_year','date_added']].dropna()
# Compute correlation
corr = numeric_df.corr()
# Plot heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.tight_layout()
plt.show()
